<?php	class SvgAjaxAdapter{		// event name, see AnimationObjectAbstract		public $event;				// name of the js function which will send an ajax call		public $jsFunctionName;				// the request URL: eg: "ajax/index.php?method=test"		public $requestURL;				// array of parameters to send during ajax call.		// array("circle_1_width"=>array("item_id"=>"circle1", "attribute"=>"width"))		public $parameters;				// ajax response instructions. Methods like insert, update, delete fills this instruction array. 		public $ajaxResponseInstructions;				// Flag for clock activity. Turn this on to bind a clock to the javascript function you defined.		public $clockActive = false;				// clock frequency related to the clock. Valid if $clockActive is true. 1 second initially.		public $clockFrequency = 1000;				// flag to send loop count as a parameter. 		public $sendLoopCount = true;				function __construct(){					}				function addAttribute($arg, $itemId, $attribute){			$this->parameters[$arg] = array("item_id"=>$itemId, "attribute"=>$attribute);		}				function renderJS(){					$function = "\n \t var ".$this->jsFunctionName."Counter = 0;";						$function .= "\n \t  function ".$this->jsFunctionName."(){ ";						if(strstr($this->requestURL, "?") == false){$this->requestURL .= "?";}												if($this->sendLoopCount == true && $this->clockActive == true){					$this->requestURL .= "&loopCount='+".$this->jsFunctionName."Counter+'";					$function .= "\n \t  ".$this->jsFunctionName."Counter++";				}								if(is_array($this->parameters)){					foreach($this->parameters AS $key=>$itemParams){						$itemId = $itemParams["item_id"];						$attribute = $itemParams["attribute"];						$function .= "\n \t \t var ".$key." =  document.getElementById('".$itemId."').getAttributeNS(null,'".$attribute."'); ";						$this->requestURL .= "&".$key."= '+encodeURIComponent(".$key.")+'";					}				}												$function .= "\n \t \t parent.svgdreamsAjax('".$this->requestURL."');";					$function .= "\n \t }";					if($this->clockActive == true){ // if the clock is active, 				$function .= "\n \n \t \t var ".$this->jsFunctionName."Frequency = ".$this->clockFrequency.";";				$function .= "\n \t \t setInterval('".$this->jsFunctionName."()', ".$this->jsFunctionName."Frequency);";			}					return $function;				}				public function insert($elementObj, $targetId = "scene"){			$this->ajaxResponseInstructions[] = array("action"=>"insert", "elementId"=>$targetId, "shapeType"=>$elementObj->shapeType , "attributes"=>$elementObj->getElementAttributes());		}				public function addText($targetId, $text){			$this->ajaxResponseInstructions[] = array("action"=>"text", "elementId"=>$targetId, "text"=>$text);		}				public function insertAnimation($elementObj, $targetId){			$this->ajaxResponseInstructions[] = array("action"=>"insert", "elementId"=>$targetId, "shapeType"=>$elementObj->animationType , "attributes"=>$elementObj->getElementAttributes());		}				public function update($targetId, $attribute, $value){			$this->ajaxResponseInstructions[] = array("action"=>"update", "elementId"=>$targetId, "attribute"=>$attribute, "value"=>$value);		}				// deletes the shape with the given targetId		public function delete($targetId){			$this->ajaxResponseInstructions[] = array("action"=>"delete", "elementId"=>$targetId);		}				// rotates the shape by given targetId and angle. 		public function rotate($targetId, $angle){			$this->ajaxResponseInstructions[] = array("action"=>"rotate", "elementId"=>$targetId, "angle"=>$angle);		}				// adds an event to a target with a given function name.		public function bindEvent($targetId, $event, $functionName){			$this->ajaxResponseInstructions[] = array("action"=>"event", "elementId"=>$targetId, "event"=>$event, "functionName"=>$functionName);		}				public function move($targetId, $x, $y){			$this->ajaxResponseInstructions[] = array("action"=>"move", "elementId"=>$targetId, "x"=>$x, "y"=>$y);		}				public function ajaxResponse(){			return json_encode($this->ajaxResponseInstructions);		}		}?>